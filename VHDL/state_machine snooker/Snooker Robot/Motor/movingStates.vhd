-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Altera Program License
-- Subscription Agreement, Altera MegaCore Function License
-- Agreement, or other applicable license agreement, including,
-- without limitation, that your use is for the sole purpose of
-- programming logic devices manufactured by Altera and sold by
-- Altera or its authorized distributors.  Please refer to the
-- applicable agreement for further details.


-- Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
-- Created on Sun Nov 22 11:59:40 2015

LIBRARY ieee;
use ieee.numeric_std.all;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;


--  Entity Declaration

ENTITY movingStates IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
	clk : IN STD_LOGIC;
	rst : IN STD_LOGIC;
	rs_data : IN STD_LOGIC_VECTOR(7 downto 0);
	rs_done : IN STD_LOGIC;
	echo_count0 : IN std_logic_vector(20 downto 0);
	echo_count1 : IN std_logic_vector(20 downto 0);
	echo_count2 : IN std_logic_vector(20 downto 0);
	echo_count3 : IN std_logic_vector(20 downto 0);
	pwm0_s : OUT STD_LOGIC_VECTOR(13 downto 0);
	pwm1_s : OUT STD_LOGIC_VECTOR(13 downto 0);
	pwm2_s : OUT STD_LOGIC_VECTOR(13 downto 0);
	pwm3_s : OUT STD_LOGIC_VECTOR(13 downto 0);
	ostate : OUT STD_LOGIC_VECTOR(6 downto 0);
	direction0_s : OUT STD_LOGIC_VECTOR(1 downto 0);
	direction1_s : OUT STD_LOGIC_VECTOR(1 downto 0);
	direction2_s : OUT STD_LOGIC_VECTOR(1 downto 0);
	direction3_s : OUT STD_LOGIC_VECTOR(1 downto 0)
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END movingStates;


--  Architecture Body

ARCHITECTURE movingStates_architecture OF movingStates IS

type state_type is (start,drivingDistance,align,alignedDriving,timedDriving,moveUntil,rotate90,stop,rs_start);

signal allowAcc,drivingDistance_far,drivingDistance_close,deltaSub,motorRight,motorLeft,deltaBiggerThan,alignedDriving_maxDistance,count,allowNs,moveUntil_Condition,rotate_until,rotate_moveCond1,rotate_moveCond2,countAcc,condition_rs : boolean;
signal current_state , next_state : state_type;
signal delta : std_logic_vector(20 downto 0);
signal direction_aligned : std_LOGIC_VECTOR (1 downto 0);
signal alignedDriving_speed_1 : std_logic_vector(13 downto 0);
signal alignedDriving_speed_3 : std_logic_vector(13 downto 0);
signal alignedDriving_s0 : std_logic_vector(13 downto 0);
signal timeCounter : std_LOGIC_VECTOR(31 downto 0);
signal accCounter : std_logic_vector (31 downto 0);

 
constant speed_0 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(0, 14));
constant speed_rotation_1 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(7500, 14));
constant speed_rotation_3 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(3000, 14));
constant speed_30 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(3750, 14));
constant speed_40 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(5000, 14));
constant speed_50 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(6250, 14));
constant speed_60 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(7500, 14));
constant speed_70 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(8750, 14));
constant speed_80 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(10000, 14));
constant speed_90 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(11250, 14));
constant speed_95 : std_LOGIC_VECTOR(13 downto 0) := std_LOGIC_VECTOR(to_unsigned(11875, 14));
constant speed_100 : std_logic_vector(13 downto 0) := std_logic_vector(to_unsigned(12500, 14));
constant direction_free : std_logic_vector(1 downto 0):= "00";
constant direction_clockWise : std_logic_vector(1 downto 0):= "01";
constant direction_cClockWise : std_logic_vector(1 downto 0):= "10";
constant direction_break : std_logic_vector(1 downto 0):= "11";


BEGIN

--rs_input <= std_logic_vector(to_unsigned(tryRsSignal(0), 8)); 
condition_rs <= (rs_data = x"1");
drivingDistance_far <= (echo_count0 > 55000 AND echo_count1 > 55000);
drivingDistance_close <= (echo_count0 < 50000 AND echo_count1 < 50000);
alignedDriving_maxDistance <= (echo_count0 < 150000 AND echo_count1 < 150000);
moveUntil_Condition <= (echo_count2 < 100000 AND echo_count3 < 100000);
rotate_moveCond1 <= (echo_count0 < 100000 AND echo_count1 < 100000);
rotate_moveCond2 <= (delta < 20000);
rotate_until <= (rotate_moveCond1 AND rotate_moveCond2);
deltaBiggerThan <= (delta > 300);
motorLeft <= (deltaSub = true AND deltaBiggerThan);
motorRight <= (deltaSub = false AND deltaBiggerThan);


process(echo_count0,echo_count1,delta)
begin 
	if (echo_count0 > echo_count1) then -- false = clockwise
			deltaSub <= false;
			delta <= echo_count0 - echo_count1;
			direction_aligned <= direction_clockWise;
			alignedDriving_s0 <= speed_40;
		else											-- true = cClockwise
			deltaSub <= true;
			delta <= echo_count1 - echo_count0;
			direction_aligned <= direction_cClockWise;
			alignedDriving_s0 <= speed_40;
	end if;
end process;

process(rst,clk) 
BEGIN
	if rst = '1' then
		current_state <= start;
	elsif clk = '1' and clk'event then
		if rs_data = x"1" then 
			current_state <= rs_start;
		else 
			current_state <= next_state;
		end if;
	end if;	
end process;


process(rst,clk,countAcc)
BEGIN
	if rst = '1' then
		accCounter <= (others => '0');		
	elsif clk = '1' and clk'event then
		if countAcc then
			if (accCounter < 180000) then
				accCounter <= accCounter + '1';
				allowAcc <= true;
			else
				accCounter <= (others => '0');
				allowAcc <= false;
			end if;
		else
			accCounter <= (others => '0');
		end if;
	end if;
end process;

process(rst,clk,count)
BEGIN
	if rst = '1' then
		timeCounter <= (others => '0');
		allowNs <= false;
	elsif clk = '1' and clk'event then
		if count then
			if (timeCounter < 350000) then
				timeCounter <= timeCounter + '1';
			else
				allowNs <= true;
				timeCounter <= (others => '0');
			end if;
		else
			allowNs <= false;
			timeCounter <= (others => '0');
		end if;
	end if;
end process;

process(current_state,next_state,drivingDistance_close,drivingDistance_far,alignedDriving_maxDistance,motorRight,motorLeft,deltaBiggerThan,alignedDriving_speed_1,alignedDriving_speed_3,allowNs,moveUntil_Condition,rotate_until,direction_aligned,condition_rs,allowAcc,alignedDriving_s0,condition_rs)
begin
	pwm0_s <= speed_0;
	pwm1_s <= speed_0;
	pwm2_s <= speed_0;
	pwm3_s <= speed_0;
	direction0_s <= direction_free;
	direction1_s <= direction_free;
	direction2_s <= direction_free;
	direction3_s <= direction_free;
	count <= false;
	next_state <= current_state;
	
	case current_state is
		when start =>
			pwm0_s <= speed_0;
			pwm1_s <= speed_0;
			pwm2_s <= speed_0;
			pwm3_s <= speed_0;
	   	direction0_s <= direction_free;
			direction1_s <= direction_free;
			direction2_s <= direction_free;
			direction3_s <= direction_free;
			next_state <= drivingDistance;
			
		when drivingDistance =>
		if drivingDistance_far then
			pwm0_s <= speed_100;
			pwm2_s <= speed_100;
			direction0_s <= direction_cClockWise;
			direction2_s <= direction_clockWise;
		elsif drivingDistance_close then
			pwm0_s <= speed_100;				
			pwm2_s <= speed_100;
			direction2_s <= direction_cClockWise;
			direction0_s <= direction_clockWise;
		else
			pwm0_s <= speed_0;
			pwm1_s <= speed_0;
			pwm2_s <= speed_0;
			pwm3_s <= speed_0;
			direction0_s <= direction_free;
			direction1_s <= direction_free;
			direction2_s <= direction_free;
			direction3_s <= direction_free;
			next_state <= align;
		end if;
			
		when align =>
		pwm1_s <= speed_40;
		if motorRight then
			direction1_s <= direction_clockWise;
		elsif motorLeft then
			direction1_s <= direction_cClockWise;
		else
			pwm0_s <= speed_0;
			pwm1_s <= speed_0;
			pwm2_s <= speed_0;
			pwm3_s <= speed_0;
			direction0_s <= direction_free;
			direction1_s <= direction_free;
			direction2_s <= direction_free;
			direction3_s <= direction_free;
			next_state <= alignedDriving;
		end if;
			
		when alignedDriving =>
		direction0_s <= direction_aligned;
		pwm0_s <= alignedDriving_s0;
		countAcc <= true;
		if alignedDriving_maxDistance then
			if allowAcc then
				pwm1_s <= speed_100;
				pwm3_s <= speed_100;
				direction1_s <= direction_cClockWise;
				direction3_s <= direction_clockWise;
			else
				pwm1_s <= speed_70;
				pwm3_s <= speed_70;
				direction1_s <= direction_cClockWise;
				direction3_s <= direction_clockWise;
			end if;
		else
			pwm1_s <= speed_0;
			pwm3_s <= speed_0;
			direction1_s <= direction_break;
			direction3_s <= direction_break;
			next_state <= timedDriving;
		end if;
		
		when timedDriving =>
		count <= true;
		if allowNs then
			count <= false;
			next_state <= moveUntil;
		else
			pwm0_s <= speed_0;
			pwm1_s <= speed_90;
			pwm2_s <= speed_0;
			pwm3_s <= speed_90;
			direction0_s <= direction_free;
			direction1_s <= direction_cClockWise;
			direction2_s <= direction_free;
			direction3_s <= direction_clockWise;
		end if;
			
		when moveUntil =>
		if moveUntil_Condition then
			pwm0_s <= speed_0;
			pwm1_s <= speed_0;
			pwm2_s <= speed_0;
			pwm3_s <= speed_0;
			direction0_s <= direction_break;
			direction1_s <= direction_break;
			direction2_s <= direction_break;
			direction3_s <= direction_break;
			next_state <= rotate90;
		else
			pwm0_s <= speed_100;
			pwm1_s <= speed_0;
			pwm2_s <= speed_100;
			pwm3_s <= speed_0;
			direction0_s <= direction_cClockWise;
			direction1_s <= direction_free;
			direction2_s <= direction_clockWise;
			direction3_s <= direction_free;
		end if;
		
		when rotate90 =>
		if rotate_until then
			next_state <= stop;
		else
			pwm0_s <= speed_0;
			pwm1_s <= speed_30;
			pwm2_s <= speed_0;
			pwm3_s <= speed_30;
			direction0_s <= direction_free;
			direction1_s <= direction_clockWise;
			direction2_s <= direction_free;
			direction3_s <= direction_clockWise;
		end if;
		
		when stop =>
		count <= true;
		if allowNs then
			count <= false;
			next_state <= start;
		else
			pwm0_s <= speed_0;
			pwm1_s <= speed_0;
			pwm2_s <= speed_0;
			pwm3_s <= speed_0;
			direction0_s <= direction_break;
			direction1_s <= direction_break;
			direction2_s <= direction_break;
			direction3_s <= direction_break;
		end if;
		
		when rs_start =>
			if condition_rs then
				pwm1_s <= speed_0;
				pwm2_s <= speed_0;
				pwm0_s <= speed_0;
				pwm3_s <= speed_0;
				direction0_s <= direction_break;
				direction1_s <= direction_break;
				direction2_s <= direction_break;
				direction3_s <= direction_break;
			else
				next_state <= start;
		end if;
				
	end case;
end process;

with current_state select
		ostate <= "1111001" when start,--1
					 "0100100" when drivingDistance,--2
					 "0110000" when align,--3
					 "0010010" when alignedDriving,--4
					 "0011001" when timedDriving,--5
					 "0000010" when moveUntil,--6
					 "0111000" when rotate90,--7
					 "0000000" when stop, -- 8
					 "0010000" when rs_start,--9
					 "0001000" when others; --A

END movingStates_architecture;
