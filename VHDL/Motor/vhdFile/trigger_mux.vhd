-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Altera Program License
-- Subscription Agreement, Altera MegaCore Function License
-- Agreement, or other applicable license agreement, including,
-- without limitation, that your use is for the sole purpose of
-- programming logic devices manufactured by Altera and sold by
-- Altera or its authorized distributors.  Please refer to the
-- applicable agreement for further details.


-- Generated by Quartus II 64-Bit Version 13.0 (Build Build 232 06/12/2013)
-- Created on Fri Nov 20 09:04:59 2015

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;


--  Entity Declaration

ENTITY trigger_mux IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
clk : IN STD_LOGIC;
rst : IN STD_LOGIC;
t_enable0 : OUT STD_LOGIC;
t_enable1 : OUT STD_LOGIC;
t_enable2 : OUT STD_LOGIC;
t_enable3 : OUT STD_LOGIC

);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END trigger_mux;


--  Architecture Body

ARCHITECTURE trigger_mux_architecture OF trigger_mux IS
signal counter : std_logic_vector(20 downto 0);
signal output : std_logic_vector(2 downto 0);

BEGIN
process(clk,rst)
begin
	if rst = '1' then
		counter <= (others => '0');
		output <= (others => '0');
	elsif clk'event AND clk = '1' then
		if counter < 1500500 then
			if counter = 0 then
				if(output < 4) then
						if output = 0 then
							t_enable0 <= '1';
							t_enable1 <= '0';
							t_enable2 <= '0';
							t_enable3 <= '0';
						elsif output = 1 then
							t_enable0 <= '0';
							t_enable1 <= '1';
							t_enable2 <= '0';
							t_enable3 <= '0';
						elsif output = 2 then
							t_enable0 <= '0';
							t_enable1 <= '0';
							t_enable2 <= '1';
							t_enable3 <= '0';
						elsif output = 3 then
							t_enable0 <= '0';
							t_enable1 <= '0';
							t_enable2 <= '0';
							t_enable3 <= '1';
						end if;
					output <= output + '1';
				else
					output <= (others => '0');
				end if;
			end if;
			counter <= counter + '1';
		else
			counter <= (others => '0');
		end if;
	end if;
end process;
END trigger_mux_architecture;
