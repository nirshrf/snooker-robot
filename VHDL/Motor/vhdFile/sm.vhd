-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2010 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.


-- Generated by Quartus II Version 9.1 (Build Build 304 01/25/2010)
-- Created on Tue Jan 20 13:16:46 2015

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all; 
use IEEE.STD_LOGIC_UNSIGNED.ALL;


--  Entity Declaration

ENTITY sm IS
	-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	PORT
	(
		clk  : in STD_LOGIC;
		rst  : in STD_LOGIC;
		data : in STD_LOGIC_VECTOR(7 downto 0);
		done : in STD_LOGIC;
		add  : out STD_LOGIC_VECTOR(7 downto 0);
		sendcontrol : out STD_LOGIC
	);
	-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
	
END sm;


--  Architecture Body

ARCHITECTURE sm_architecture OF sm IS

signal x :  std_logic_vector(7 downto 0);
signal y :  std_logic_vector(7 downto 0); 

type state_vector is(start,check1,check2,check3);
signal state:state_vector;
	
BEGIN 	 
	
process(clk,rst)
begin
if rst = '1' then 
	state <= start;
	x <= (others => '0');
	y <= (others => '0');
	sendcontrol <= '0';
elsif clk'event and clk='0' then 	
 
	case state is 
		when start=>
		if done='1' then
			sendcontrol<='1';
			state<=check1;
			x<=data;
			y<=(others=>'0');
		end if;
		
		when check1=>
		if x = 1 then
				if y < 69 then
					add <= y;
					y <= y + '1'; 
				else
					y <= (others => '0');
					state <= start; 
					sendcontrol <= '0';
				end if;	 
		else
			state <= check2; 
		end if;
		
		when check2=>
		if x = 2 then 
					if y < 72 then
						add <= y + "01000101";
						y <= y + '1'; 
					else
						state <= start; 	
						sendcontrol <= '0'; 
				end if;
		else
			state <= check3; 
		end if;
		
		when check3=>
		if x = "00000011" then
			 if y < 72 then
				add <= y + "10001101";
				y <= y + '1'; 
			else
				state <= start; 
				sendcontrol <= '0';
			end if;	 	
		end if;
		
		when others=>
			state <= start;
			x <= (others => '0');
			y <= (others => '0');
			sendcontrol <= '0';
		end case;
end if;
end process;
				

END sm_architecture;
